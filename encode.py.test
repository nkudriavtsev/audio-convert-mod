#!/usr/bin/python
# -*- coding: utf-8 -*-
#  Copyright (C) 2009 Stewart Adam
#  This file is part of audio-convert-mod.

#  audio-convert-mod is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.

#  audio-convert-mod is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

#  You should have received a copy of the GNU General Public License
#  along with audio-convert-mod; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
import os
import sys
import tarfile
import time

buildroot = os.path.dirname(os.path.abspath(__file__))
testroot = os.path.join(buildroot, 'tests')
srcroot = os.path.join(buildroot, 'src')
sys.path.insert(0, srcroot)

from audio_convert_mod import formats
from audio_convert_mod.i18n import _
tarball = tarfile.open(os.path.join(buildroot, 'sample-audio.tar.bz2'), 
'r')
tarball.extractall(testroot)
tarball.close()

infile = os.path.join(testroot, 'test.wav')

tags = ['title', 'artist', 'album', '2000', '1', 'genre', 'comments']
# Exception for AAC with tuple as track num
tags_aac = ['title', 'artist', 'album', '2000', '(1, 0)', 'genre', 'comments']
# Exception for MP3 with no comments
tags_mp3 = ['title', 'artist', 'album', '2000', '1', 'genre', '']

total = len(formats.FORMATS.keys())-1 # -1 for WAV
current = 1
for key in formats.FORMATS.keys():
  format = formats.FORMATS[key]
  if key.lower() == 'wav':
    continue
  if not format.get()[0]: # can't encode
    print _('%(a)i/%(b)i: Binaries for encoding to %(c)s not present - skipping') % {'a': current, 'b': total, 'c': key}
    current += 1
    continue
  quality = int(format.get()[3][-1][0]) # highest quality
  if key.lower() == 'ogg': # Ogg doesn't let use such a high bitrate for silence
    quality = int(format.get()[3][-3][0]) # highest quality
  outfile = formats.getNewExt(format.extensions[0], infile)
  try:
    sub, command = format.encode(infile, outfile, quality)
    while sub.poll() == None:
      sub.stdout.readlines()
      sub.stderr.readlines()
    assert(os.path.isfile(outfile))
  except:
    print _('%(a)i/%(b)i: Encoding to %(c)s has failed!') % {'a': current, 'b': total, 'c': key}
    sys.exit(1)
  print _('%(a)i/%(b)i: Encoding to %(c)s has succeeded.') % {'a': current, 'b': total, 'c': key}
  if not format.get()[2]: # can't read or set tags
    current += 1
    continue
  try:
    format.setTags(outfile, tags)
    time.sleep(0.1)
    assert(format.getTags(outfile) in [tags, None, tags_aac, tags_mp3])
  except:
    print _('%(a)i/%(b)i: Tagging metadata on %(c)s has failed!') % {'a': current, 'b': total, 'c': key}
    print format.getTags(outfile), tags
    sys.exit(1)
  current += 1
